{"message":"this seems like a manual implementation of the non-exhaustive pattern","code":{"code":"clippy::manual_non_exhaustive","explanation":null},"level":"warning","spans":[{"file_name":"src/datetime.rs","byte_start":1222,"byte_end":2082,"line_start":38,"line_end":62,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub enum SecondsFormat {","highlight_start":1,"highlight_end":25},{"text":"    /// Format whole seconds only, with no decimal point nor subseconds.","highlight_start":1,"highlight_end":73},{"text":"    Secs,","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Use fixed 3 subsecond digits. This corresponds to","highlight_start":1,"highlight_end":58},{"text":"    /// [Fixed::Nanosecond3](format/enum.Fixed.html#variant.Nanosecond3).","highlight_start":1,"highlight_end":74},{"text":"    Millis,","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Use fixed 6 subsecond digits. This corresponds to","highlight_start":1,"highlight_end":58},{"text":"    /// [Fixed::Nanosecond6](format/enum.Fixed.html#variant.Nanosecond6).","highlight_start":1,"highlight_end":74},{"text":"    Micros,","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Use fixed 9 subsecond digits. This corresponds to","highlight_start":1,"highlight_end":58},{"text":"    /// [Fixed::Nanosecond9](format/enum.Fixed.html#variant.Nanosecond9).","highlight_start":1,"highlight_end":74},{"text":"    Nanos,","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Automatically select one of `Secs`, `Millis`, `Micros`, or `Nanos` to","highlight_start":1,"highlight_end":78},{"text":"    /// display all available non-zero sub-second digits.  This corresponds to","highlight_start":1,"highlight_end":79},{"text":"    /// [Fixed::Nanosecond](format/enum.Fixed.html#variant.Nanosecond).","highlight_start":1,"highlight_end":72},{"text":"    AutoSi,","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Do not match against this.","highlight_start":1,"highlight_end":34},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    __NonExhaustive,","highlight_start":1,"highlight_end":21},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(clippy::manual_non_exhaustive)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this variant","code":null,"level":"help","spans":[{"file_name":"src/datetime.rs","byte_start":2064,"byte_end":2079,"line_start":61,"line_end":61,"column_start":5,"column_end":20,"is_primary":true,"text":[{"text":"    __NonExhaustive,","highlight_start":5,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_non_exhaustive","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add the attribute","code":null,"level":"help","spans":[{"file_name":"src/datetime.rs","byte_start":1222,"byte_end":1244,"line_start":38,"line_end":38,"column_start":1,"column_end":23,"is_primary":true,"text":[{"text":"pub enum SecondsFormat {","highlight_start":1,"highlight_end":23}],"label":null,"suggested_replacement":"#[non_exhaustive] pub enum SecondsFormat","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this seems like a manual implementation of the non-exhaustive pattern\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/datetime.rs:38:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub enum SecondsFormat {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m_\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: add the attribute: `#[non_exhaustive] pub enum SecondsFormat`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// Format whole seconds only, with no decimal point nor subseconds.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Secs,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m61\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    __NonExhaustive,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::manual_non_exhaustive)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove this variant\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/datetime.rs:61:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m61\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    __NonExhaustive,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_non_exhaustive\u001b[0m\n\n"}
{"message":"this seems like a manual implementation of the non-exhaustive pattern","code":{"code":"clippy::manual_non_exhaustive","explanation":null},"level":"warning","spans":[{"file_name":"src/format/parsed.rs","byte_start":1023,"byte_end":4168,"line_start":27,"line_end":111,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub struct Parsed {","highlight_start":1,"highlight_end":20},{"text":"    /// Year.","highlight_start":1,"highlight_end":14},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// This can be negative unlike [`year_div_100`](#structfield.year_div_100)","highlight_start":1,"highlight_end":80},{"text":"    /// and [`year_mod_100`](#structfield.year_mod_100) fields.","highlight_start":1,"highlight_end":64},{"text":"    pub year: Option<i32>,","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Year divided by 100. Implies that the year is >= 1 BCE when set.","highlight_start":1,"highlight_end":73},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// Due to the common usage, if this field is missing but","highlight_start":1,"highlight_end":62},{"text":"    /// [`year_mod_100`](#structfield.year_mod_100) is present,","highlight_start":1,"highlight_end":64},{"text":"    /// it is inferred to 19 when `year_mod_100 >= 70` and 20 otherwise.","highlight_start":1,"highlight_end":73},{"text":"    pub year_div_100: Option<i32>,","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Year modulo 100. Implies that the year is >= 1 BCE when set.","highlight_start":1,"highlight_end":69},{"text":"    pub year_mod_100: Option<i32>,","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date).","highlight_start":1,"highlight_end":79},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// This can be negative unlike [`isoyear_div_100`](#structfield.isoyear_div_100) and","highlight_start":1,"highlight_end":90},{"text":"    /// [`isoyear_mod_100`](#structfield.isoyear_mod_100) fields.","highlight_start":1,"highlight_end":66},{"text":"    pub isoyear: Option<i32>,","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date), divided by 100.","highlight_start":1,"highlight_end":95},{"text":"    /// Implies that the year is >= 1 BCE when set.","highlight_start":1,"highlight_end":52},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// Due to the common usage, if this field is missing but","highlight_start":1,"highlight_end":62},{"text":"    /// [`isoyear_mod_100`](#structfield.isoyear_mod_100) is present,","highlight_start":1,"highlight_end":70},{"text":"    /// it is inferred to 19 when `isoyear_mod_100 >= 70` and 20 otherwise.","highlight_start":1,"highlight_end":76},{"text":"    pub isoyear_div_100: Option<i32>,","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date), modulo 100.","highlight_start":1,"highlight_end":91},{"text":"    /// Implies that the year is >= 1 BCE when set.","highlight_start":1,"highlight_end":52},{"text":"    pub isoyear_mod_100: Option<i32>,","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Month (1--12).","highlight_start":1,"highlight_end":23},{"text":"    pub month: Option<u32>,","highlight_start":1,"highlight_end":28},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Week number, where the week 1 starts at the first Sunday of January","highlight_start":1,"highlight_end":76},{"text":"    /// (0--53, 1--53 or 1--52 depending on the year).","highlight_start":1,"highlight_end":55},{"text":"    pub week_from_sun: Option<u32>,","highlight_start":1,"highlight_end":36},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Week number, where the week 1 starts at the first Monday of January","highlight_start":1,"highlight_end":76},{"text":"    /// (0--53, 1--53 or 1--52 depending on the year).","highlight_start":1,"highlight_end":55},{"text":"    pub week_from_mon: Option<u32>,","highlight_start":1,"highlight_end":36},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// [ISO week number](../naive/struct.NaiveDate.html#week-date)","highlight_start":1,"highlight_end":68},{"text":"    /// (1--52 or 1--53 depending on the year).","highlight_start":1,"highlight_end":48},{"text":"    pub isoweek: Option<u32>,","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Day of the week.","highlight_start":1,"highlight_end":25},{"text":"    pub weekday: Option<Weekday>,","highlight_start":1,"highlight_end":34},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Day of the year (1--365 or 1--366 depending on the year).","highlight_start":1,"highlight_end":66},{"text":"    pub ordinal: Option<u32>,","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Day of the month (1--28, 1--29, 1--30 or 1--31 depending on the month).","highlight_start":1,"highlight_end":80},{"text":"    pub day: Option<u32>,","highlight_start":1,"highlight_end":26},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Hour number divided by 12 (0--1). 0 indicates AM and 1 indicates PM.","highlight_start":1,"highlight_end":77},{"text":"    pub hour_div_12: Option<u32>,","highlight_start":1,"highlight_end":34},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Hour number modulo 12 (0--11).","highlight_start":1,"highlight_end":39},{"text":"    pub hour_mod_12: Option<u32>,","highlight_start":1,"highlight_end":34},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Minute number (0--59).","highlight_start":1,"highlight_end":31},{"text":"    pub minute: Option<u32>,","highlight_start":1,"highlight_end":29},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Second number (0--60, accounting for leap seconds).","highlight_start":1,"highlight_end":60},{"text":"    pub second: Option<u32>,","highlight_start":1,"highlight_end":29},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// The number of nanoseconds since the whole second (0--999,999,999).","highlight_start":1,"highlight_end":75},{"text":"    pub nanosecond: Option<u32>,","highlight_start":1,"highlight_end":33},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// The number of non-leap seconds since the midnight UTC on January 1, 1970.","highlight_start":1,"highlight_end":82},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// This can be off by one if [`second`](#structfield.second) is 60 (a leap second).","highlight_start":1,"highlight_end":89},{"text":"    pub timestamp: Option<i64>,","highlight_start":1,"highlight_end":32},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Offset from the local time to UTC, in seconds.","highlight_start":1,"highlight_end":55},{"text":"    pub offset: Option<i32>,","highlight_start":1,"highlight_end":29},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// A dummy field to make this type not fully destructible (required for API stability).","highlight_start":1,"highlight_end":93},{"text":"    _dummy: (),","highlight_start":1,"highlight_end":16},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove this field","code":null,"level":"help","spans":[{"file_name":"src/format/parsed.rs","byte_start":4155,"byte_end":4165,"line_start":110,"line_end":110,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"    _dummy: (),","highlight_start":5,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_non_exhaustive","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add the attribute","code":null,"level":"help","spans":[{"file_name":"src/format/parsed.rs","byte_start":1023,"byte_end":1040,"line_start":27,"line_end":27,"column_start":1,"column_end":18,"is_primary":true,"text":[{"text":"pub struct Parsed {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":"#[non_exhaustive] pub struct Parsed","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this seems like a manual implementation of the non-exhaustive pattern\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/format/parsed.rs:27:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub struct Parsed {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m_\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: add the attribute: `#[non_exhaustive] pub struct Parsed`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// Year.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ///\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// This can be negative unlike [`year_div_100`](#structfield.year_div_100)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m110\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    _dummy: (),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m111\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove this field\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/format/parsed.rs:110:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m110\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    _dummy: (),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_non_exhaustive\u001b[0m\n\n"}
{"message":"manual `RangeInclusive::contains` implementation","code":{"code":"clippy::manual_range_contains","explanation":null},"level":"warning","spans":[{"file_name":"src/naive/date.rs","byte_start":61788,"byte_end":61813,"line_start":1643,"line_end":1643,"column_start":12,"column_end":37,"is_primary":true,"text":[{"text":"        if 0 <= year && year <= 9999 {","highlight_start":12,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(clippy::manual_range_contains)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"use","code":null,"level":"help","spans":[{"file_name":"src/naive/date.rs","byte_start":61788,"byte_end":61813,"line_start":1643,"line_end":1643,"column_start":12,"column_end":37,"is_primary":true,"text":[{"text":"        if 0 <= year && year <= 9999 {","highlight_start":12,"highlight_end":37}],"label":null,"suggested_replacement":"(0..=9999).contains(&year)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: manual `RangeInclusive::contains` implementation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/naive/date.rs:1643:12\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1643\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        if 0 <= year && year <= 9999 {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use: `(0..=9999).contains(&year)`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::manual_range_contains)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains\u001b[0m\n\n"}
{"message":"methods with the following characteristics: (`to_*` and `self` type is `Copy`) usually take `self` by value","code":{"code":"clippy::wrong_self_convention","explanation":null},"level":"warning","spans":[{"file_name":"src/naive/internals.rs","byte_start":16864,"byte_end":16869,"line_start":342,"line_end":342,"column_start":19,"column_end":24,"is_primary":true,"text":[{"text":"    pub fn to_mdf(&self) -> Mdf {","highlight_start":19,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(clippy::wrong_self_convention)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider choosing a less ambiguous name","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#wrong_self_convention","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: methods with the following characteristics: (`to_*` and `self` type is `Copy`) usually take `self` by value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/naive/internals.rs:342:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m342\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub fn to_mdf(&self) -> Mdf {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::wrong_self_convention)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider choosing a less ambiguous name\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#wrong_self_convention\u001b[0m\n\n"}
{"message":"methods with the following characteristics: (`to_*` and `self` type is `Copy`) usually take `self` by value","code":{"code":"clippy::wrong_self_convention","explanation":null},"level":"warning","spans":[{"file_name":"src/naive/internals.rs","byte_start":19644,"byte_end":19649,"line_start":464,"line_end":464,"column_start":18,"column_end":23,"is_primary":true,"text":[{"text":"    pub fn to_of(&self) -> Of {","highlight_start":18,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider choosing a less ambiguous name","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#wrong_self_convention","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: methods with the following characteristics: (`to_*` and `self` type is `Copy`) usually take `self` by value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/naive/internals.rs:464:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m464\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub fn to_of(&self) -> Of {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider choosing a less ambiguous name\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#wrong_self_convention\u001b[0m\n\n"}
{"message":"manual `RangeInclusive::contains` implementation","code":{"code":"clippy::manual_range_contains","explanation":null},"level":"warning","spans":[{"file_name":"src/naive/isoweek.rs","byte_start":4558,"byte_end":4583,"line_start":134,"line_end":134,"column_start":12,"column_end":37,"is_primary":true,"text":[{"text":"        if 0 <= year && year <= 9999 {","highlight_start":12,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"use","code":null,"level":"help","spans":[{"file_name":"src/naive/isoweek.rs","byte_start":4558,"byte_end":4583,"line_start":134,"line_end":134,"column_start":12,"column_end":37,"is_primary":true,"text":[{"text":"        if 0 <= year && year <= 9999 {","highlight_start":12,"highlight_end":37}],"label":null,"suggested_replacement":"(0..=9999).contains(&year)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: manual `RangeInclusive::contains` implementation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/naive/isoweek.rs:134:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m134\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        if 0 <= year && year <= 9999 {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use: `(0..=9999).contains(&year)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains\u001b[0m\n\n"}
{"message":"manual `Range::contains` implementation","code":{"code":"clippy::manual_range_contains","explanation":null},"level":"warning","spans":[{"file_name":"src/naive/time.rs","byte_start":23188,"byte_end":23221,"line_start":581,"line_end":581,"column_start":23,"column_end":56,"is_primary":true,"text":[{"text":"        debug_assert!(0 <= frac && frac < 1_000_000_000);","highlight_start":23,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"use","code":null,"level":"help","spans":[{"file_name":"src/naive/time.rs","byte_start":23188,"byte_end":23221,"line_start":581,"line_end":581,"column_start":23,"column_end":56,"is_primary":true,"text":[{"text":"        debug_assert!(0 <= frac && frac < 1_000_000_000);","highlight_start":23,"highlight_end":56}],"label":null,"suggested_replacement":"(0..1_000_000_000).contains(&frac)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: manual `Range::contains` implementation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/naive/time.rs:581:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m581\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        debug_assert!(0 <= frac && frac < 1_000_000_000);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use: `(0..1_000_000_000).contains(&frac)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains\u001b[0m\n\n"}
{"message":"manual `Range::contains` implementation","code":{"code":"clippy::manual_range_contains","explanation":null},"level":"warning","spans":[{"file_name":"src/naive/time.rs","byte_start":23440,"byte_end":23466,"line_start":590,"line_end":590,"column_start":23,"column_end":49,"is_primary":true,"text":[{"text":"        debug_assert!(0 <= secs && secs < 86_400);","highlight_start":23,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"use","code":null,"level":"help","spans":[{"file_name":"src/naive/time.rs","byte_start":23440,"byte_end":23466,"line_start":590,"line_end":590,"column_start":23,"column_end":49,"is_primary":true,"text":[{"text":"        debug_assert!(0 <= secs && secs < 86_400);","highlight_start":23,"highlight_end":49}],"label":null,"suggested_replacement":"(0..86_400).contains(&secs)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: manual `Range::contains` implementation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/naive/time.rs:590:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m590\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        debug_assert!(0 <= secs && secs < 86_400);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use: `(0..86_400).contains(&secs)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains\u001b[0m\n\n"}
{"message":"manual `Range::contains` implementation","code":{"code":"clippy::manual_range_contains","explanation":null},"level":"warning","spans":[{"file_name":"src/format/mod.rs","byte_start":19173,"byte_end":19195,"line_start":504,"line_end":504,"column_start":60,"column_end":82,"is_primary":true,"text":[{"text":"                if (spec == &Year || spec == &IsoYear) && !(0 <= v && v < 10_000) {","highlight_start":60,"highlight_end":82}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"use","code":null,"level":"help","spans":[{"file_name":"src/format/mod.rs","byte_start":19173,"byte_end":19195,"line_start":504,"line_end":504,"column_start":60,"column_end":82,"is_primary":true,"text":[{"text":"                if (spec == &Year || spec == &IsoYear) && !(0 <= v && v < 10_000) {","highlight_start":60,"highlight_end":82}],"label":null,"suggested_replacement":"(0..10_000).contains(&v)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: manual `Range::contains` implementation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/format/mod.rs:504:60\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m504\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                if (spec == &Year || spec == &IsoYear) && !(0 <= v && v < 10_000) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use: `(0..10_000).contains(&v)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains\u001b[0m\n\n"}
{"message":"calling `push_str()` using a single-character string literal","code":{"code":"clippy::single_char_add_str","explanation":null},"level":"warning","spans":[{"file_name":"src/format/mod.rs","byte_start":20917,"byte_end":20937,"line_start":543,"line_end":543,"column_start":21,"column_end":41,"is_primary":true,"text":[{"text":"                    result.push_str(\"Z\");","highlight_start":21,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(clippy::single_char_add_str)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_char_add_str","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using `push` with a character literal","code":null,"level":"help","spans":[{"file_name":"src/format/mod.rs","byte_start":20917,"byte_end":20937,"line_start":543,"line_end":543,"column_start":21,"column_end":41,"is_primary":true,"text":[{"text":"                    result.push_str(\"Z\");","highlight_start":21,"highlight_end":41}],"label":null,"suggested_replacement":"result.push('Z')","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: calling `push_str()` using a single-character string literal\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/format/mod.rs:543:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m543\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    result.push_str(\"Z\");\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider using `push` with a character literal: `result.push('Z')`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::single_char_add_str)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_char_add_str\u001b[0m\n\n"}
{"message":"manual `!RangeInclusive::contains` implementation","code":{"code":"clippy::manual_range_contains","explanation":null},"level":"warning","spans":[{"file_name":"src/format/parsed.rs","byte_start":9592,"byte_end":9615,"line_start":264,"line_end":264,"column_start":12,"column_end":35,"is_primary":true,"text":[{"text":"        if value < 1 || value > 12 {","highlight_start":12,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"use","code":null,"level":"help","spans":[{"file_name":"src/format/parsed.rs","byte_start":9592,"byte_end":9615,"line_start":264,"line_end":264,"column_start":12,"column_end":35,"is_primary":true,"text":[{"text":"        if value < 1 || value > 12 {","highlight_start":12,"highlight_end":35}],"label":null,"suggested_replacement":"!(1..=12).contains(&value)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: manual `!RangeInclusive::contains` implementation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/format/parsed.rs:264:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m264\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        if value < 1 || value > 12 {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use: `!(1..=12).contains(&value)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains\u001b[0m\n\n"}
{"message":"manual `!RangeInclusive::contains` implementation","code":{"code":"clippy::manual_range_contains","explanation":null},"level":"warning","spans":[{"file_name":"src/format/scan.rs","byte_start":1634,"byte_end":1654,"line_start":51,"line_end":51,"column_start":12,"column_end":32,"is_primary":true,"text":[{"text":"        if c < b'0' || b'9' < c {","highlight_start":12,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"use","code":null,"level":"help","spans":[{"file_name":"src/format/scan.rs","byte_start":1634,"byte_end":1654,"line_start":51,"line_end":51,"column_start":12,"column_end":32,"is_primary":true,"text":[{"text":"        if c < b'0' || b'9' < c {","highlight_start":12,"highlight_end":32}],"label":null,"suggested_replacement":"!(b'0'..=b'9').contains(&c)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: manual `!RangeInclusive::contains` implementation\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/format/scan.rs:51:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        if c < b'0' || b'9' < c {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use: `!(b'0'..=b'9').contains(&c)`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains\u001b[0m\n\n"}
{"message":"manual `RangeInclusive::contains` implementation","code":{"code":"clippy::manual_range_contains","explanation":null},"level":"warning","spans":[{"file_name":"src/format/scan.rs","byte_start":2704,"byte_end":2724,"line_start":82,"line_end":82,"column_start":43,"column_end":63,"is_primary":true,"text":[{"text":"    let s = s.trim_left_matches(|c: char| '0' <= c && c <= '9');","highlight_start":43,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"use","code":null,"level":"help","spans":[{"file_name":"src/format/scan.rs","byte_start":2704,"byte_end":2724,"line_start":82,"line_end":82,"column_start":43,"column_end":63,"is_primary":true,"text":[{"text":"    let s = s.trim_left_matches(|c: char| '0' <= c && c <= '9');","highlight_start":43,"highlight_end":63}],"label":null,"suggested_replacement":"('0'..='9').contains(&c)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: manual `RangeInclusive::contains` implementation\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/format/scan.rs:82:43\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m82\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let s = s.trim_left_matches(|c: char| '0' <= c && c <= '9');\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use: `('0'..='9').contains(&c)`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains\u001b[0m\n\n"}
{"message":"match expression looks like `matches!` macro","code":{"code":"clippy::match_like_matches_macro","explanation":null},"level":"warning","spans":[{"file_name":"src/format/scan.rs","byte_start":10368,"byte_end":10458,"line_start":316,"line_end":319,"column_start":24,"column_end":10,"is_primary":true,"text":[{"text":"        .position(|&c| match c {","highlight_start":24,"highlight_end":33},{"text":"            b'a'...b'z' | b'A'...b'Z' => false,","highlight_start":1,"highlight_end":48},{"text":"            _ => true,","highlight_start":1,"highlight_end":23},{"text":"        })","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(clippy::match_like_matches_macro)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try this","code":null,"level":"help","spans":[{"file_name":"src/format/scan.rs","byte_start":10368,"byte_end":10458,"line_start":316,"line_end":319,"column_start":24,"column_end":10,"is_primary":true,"text":[{"text":"        .position(|&c| match c {","highlight_start":24,"highlight_end":33},{"text":"            b'a'...b'z' | b'A'...b'Z' => false,","highlight_start":1,"highlight_end":48},{"text":"            _ => true,","highlight_start":1,"highlight_end":23},{"text":"        })","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":"!matches!(c, b'a'...b'z' | b'A'...b'Z')","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: match expression looks like `matches!` macro\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/format/scan.rs:316:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m316\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m        .position(|&c| match c {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m317\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            b'a'...b'z' | b'A'...b'Z' => false,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m318\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            _ => true,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m319\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        })\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try this: `!matches!(c, b'a'...b'z' | b'A'...b'Z')`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::match_like_matches_macro)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro\u001b[0m\n\n"}
{"message":"14 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 14 warnings emitted\u001b[0m\n\n"}

{"message":"unnecessary trailing semicolon","code":{"code":"redundant_semicolons","explanation":null},"level":"warning","spans":[{"file_name":"src/naive/datetime.rs","byte_start":84855,"byte_end":84856,"line_start":2279,"line_end":2279,"column_start":10,"column_end":11,"is_primary":true,"text":[{"text":"        };","highlight_start":10,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(redundant_semicolons)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this semicolon","code":null,"level":"help","spans":[{"file_name":"src/naive/datetime.rs","byte_start":84855,"byte_end":84856,"line_start":2279,"line_end":2279,"column_start":10,"column_end":11,"is_primary":true,"text":[{"text":"        };","highlight_start":10,"highlight_end":11}],"label":null,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary trailing semicolon\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/naive/datetime.rs:2279:10\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2279\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        };\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this semicolon\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(redundant_semicolons)]` on by default\u001b[0m\n\n"}
{"message":"digits grouped inconsistently by underscores","code":{"code":"clippy::inconsistent_digit_grouping","explanation":null},"level":"warning","spans":[{"file_name":"src/naive/date.rs","byte_start":1658,"byte_end":1668,"line_start":45,"line_end":45,"column_start":7,"column_end":17,"is_primary":true,"text":[{"text":"    - 146097_000;","highlight_start":7,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(clippy::inconsistent_digit_grouping)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#inconsistent_digit_grouping","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider","code":null,"level":"help","spans":[{"file_name":"src/naive/date.rs","byte_start":1658,"byte_end":1668,"line_start":45,"line_end":45,"column_start":7,"column_end":17,"is_primary":true,"text":[{"text":"    - 146097_000;","highlight_start":7,"highlight_end":17}],"label":null,"suggested_replacement":"146_097_000","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: digits grouped inconsistently by underscores\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/naive/date.rs:45:7\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m45\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    - 146097_000;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider: `146_097_000`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::inconsistent_digit_grouping)]` on by default\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#inconsistent_digit_grouping\u001b[0m\n\n"}
{"message":"6 bindings with single-character names in scope","code":{"code":"clippy::many_single_char_names","explanation":null},"level":"warning","spans":[{"file_name":"src/naive/datetime.rs","byte_start":84392,"byte_end":84393,"line_start":2270,"line_end":2270,"column_start":14,"column_end":15,"is_primary":true,"text":[{"text":"            (y, m, d, h, n, s): (i32, u32, u32, u32, u32, u32),","highlight_start":14,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/naive/datetime.rs","byte_start":84395,"byte_end":84396,"line_start":2270,"line_end":2270,"column_start":17,"column_end":18,"is_primary":true,"text":[{"text":"            (y, m, d, h, n, s): (i32, u32, u32, u32, u32, u32),","highlight_start":17,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/naive/datetime.rs","byte_start":84398,"byte_end":84399,"line_start":2270,"line_end":2270,"column_start":20,"column_end":21,"is_primary":true,"text":[{"text":"            (y, m, d, h, n, s): (i32, u32, u32, u32, u32, u32),","highlight_start":20,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/naive/datetime.rs","byte_start":84401,"byte_end":84402,"line_start":2270,"line_end":2270,"column_start":23,"column_end":24,"is_primary":true,"text":[{"text":"            (y, m, d, h, n, s): (i32, u32, u32, u32, u32, u32),","highlight_start":23,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/naive/datetime.rs","byte_start":84404,"byte_end":84405,"line_start":2270,"line_end":2270,"column_start":26,"column_end":27,"is_primary":true,"text":[{"text":"            (y, m, d, h, n, s): (i32, u32, u32, u32, u32, u32),","highlight_start":26,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/naive/datetime.rs","byte_start":84407,"byte_end":84408,"line_start":2270,"line_end":2270,"column_start":29,"column_end":30,"is_primary":true,"text":[{"text":"            (y, m, d, h, n, s): (i32, u32, u32, u32, u32, u32),","highlight_start":29,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(clippy::many_single_char_names)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#many_single_char_names","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 6 bindings with single-character names in scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/naive/datetime.rs:2270:14\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2270\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            (y, m, d, h, n, s): (i32, u32, u32, u32, u32, u32),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::many_single_char_names)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#many_single_char_names\u001b[0m\n\n"}
{"message":"6 bindings with single-character names in scope","code":{"code":"clippy::many_single_char_names","explanation":null},"level":"warning","spans":[{"file_name":"src/naive/datetime.rs","byte_start":84392,"byte_end":84393,"line_start":2270,"line_end":2270,"column_start":14,"column_end":15,"is_primary":true,"text":[{"text":"            (y, m, d, h, n, s): (i32, u32, u32, u32, u32, u32),","highlight_start":14,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/naive/datetime.rs","byte_start":84395,"byte_end":84396,"line_start":2270,"line_end":2270,"column_start":17,"column_end":18,"is_primary":true,"text":[{"text":"            (y, m, d, h, n, s): (i32, u32, u32, u32, u32, u32),","highlight_start":17,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/naive/datetime.rs","byte_start":84398,"byte_end":84399,"line_start":2270,"line_end":2270,"column_start":20,"column_end":21,"is_primary":true,"text":[{"text":"            (y, m, d, h, n, s): (i32, u32, u32, u32, u32, u32),","highlight_start":20,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/naive/datetime.rs","byte_start":84401,"byte_end":84402,"line_start":2270,"line_end":2270,"column_start":23,"column_end":24,"is_primary":true,"text":[{"text":"            (y, m, d, h, n, s): (i32, u32, u32, u32, u32, u32),","highlight_start":23,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/naive/datetime.rs","byte_start":84404,"byte_end":84405,"line_start":2270,"line_end":2270,"column_start":26,"column_end":27,"is_primary":true,"text":[{"text":"            (y, m, d, h, n, s): (i32, u32, u32, u32, u32, u32),","highlight_start":26,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/naive/datetime.rs","byte_start":84407,"byte_end":84408,"line_start":2270,"line_end":2270,"column_start":29,"column_end":30,"is_primary":true,"text":[{"text":"            (y, m, d, h, n, s): (i32, u32, u32, u32, u32, u32),","highlight_start":29,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#many_single_char_names","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 6 bindings with single-character names in scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/naive/datetime.rs:2270:14\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2270\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            (y, m, d, h, n, s): (i32, u32, u32, u32, u32, u32),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#many_single_char_names\u001b[0m\n\n"}
{"message":"this seems like a manual implementation of the non-exhaustive pattern","code":{"code":"clippy::manual_non_exhaustive","explanation":null},"level":"warning","spans":[{"file_name":"src/datetime.rs","byte_start":1222,"byte_end":2082,"line_start":38,"line_end":62,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub enum SecondsFormat {","highlight_start":1,"highlight_end":25},{"text":"    /// Format whole seconds only, with no decimal point nor subseconds.","highlight_start":1,"highlight_end":73},{"text":"    Secs,","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Use fixed 3 subsecond digits. This corresponds to","highlight_start":1,"highlight_end":58},{"text":"    /// [Fixed::Nanosecond3](format/enum.Fixed.html#variant.Nanosecond3).","highlight_start":1,"highlight_end":74},{"text":"    Millis,","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Use fixed 6 subsecond digits. This corresponds to","highlight_start":1,"highlight_end":58},{"text":"    /// [Fixed::Nanosecond6](format/enum.Fixed.html#variant.Nanosecond6).","highlight_start":1,"highlight_end":74},{"text":"    Micros,","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Use fixed 9 subsecond digits. This corresponds to","highlight_start":1,"highlight_end":58},{"text":"    /// [Fixed::Nanosecond9](format/enum.Fixed.html#variant.Nanosecond9).","highlight_start":1,"highlight_end":74},{"text":"    Nanos,","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Automatically select one of `Secs`, `Millis`, `Micros`, or `Nanos` to","highlight_start":1,"highlight_end":78},{"text":"    /// display all available non-zero sub-second digits.  This corresponds to","highlight_start":1,"highlight_end":79},{"text":"    /// [Fixed::Nanosecond](format/enum.Fixed.html#variant.Nanosecond).","highlight_start":1,"highlight_end":72},{"text":"    AutoSi,","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Do not match against this.","highlight_start":1,"highlight_end":34},{"text":"    #[doc(hidden)]","highlight_start":1,"highlight_end":19},{"text":"    __NonExhaustive,","highlight_start":1,"highlight_end":21},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(clippy::manual_non_exhaustive)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this variant","code":null,"level":"help","spans":[{"file_name":"src/datetime.rs","byte_start":2064,"byte_end":2079,"line_start":61,"line_end":61,"column_start":5,"column_end":20,"is_primary":true,"text":[{"text":"    __NonExhaustive,","highlight_start":5,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_non_exhaustive","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add the attribute","code":null,"level":"help","spans":[{"file_name":"src/datetime.rs","byte_start":1222,"byte_end":1244,"line_start":38,"line_end":38,"column_start":1,"column_end":23,"is_primary":true,"text":[{"text":"pub enum SecondsFormat {","highlight_start":1,"highlight_end":23}],"label":null,"suggested_replacement":"#[non_exhaustive] pub enum SecondsFormat","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this seems like a manual implementation of the non-exhaustive pattern\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/datetime.rs:38:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub enum SecondsFormat {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m_\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: add the attribute: `#[non_exhaustive] pub enum SecondsFormat`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// Format whole seconds only, with no decimal point nor subseconds.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Secs,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m61\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    __NonExhaustive,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::manual_non_exhaustive)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove this variant\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/datetime.rs:61:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m61\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    __NonExhaustive,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_non_exhaustive\u001b[0m\n\n"}
{"message":"this is a decimal constant","code":{"code":"clippy::zero_prefixed_literal","explanation":null},"level":"warning","spans":[{"file_name":"src/datetime.rs","byte_start":82095,"byte_end":82106,"line_start":2335,"line_end":2335,"column_start":63,"column_end":74,"is_primary":true,"text":[{"text":"        let dt = pst.ymd(2018, 1, 11).and_hms_nano(10, 5, 13, 084_660_000);","highlight_start":63,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(clippy::zero_prefixed_literal)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_prefixed_literal","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"if you mean to use a decimal constant, remove the `0` to avoid confusion","code":null,"level":"help","spans":[{"file_name":"src/datetime.rs","byte_start":82095,"byte_end":82106,"line_start":2335,"line_end":2335,"column_start":63,"column_end":74,"is_primary":true,"text":[{"text":"        let dt = pst.ymd(2018, 1, 11).and_hms_nano(10, 5, 13, 084_660_000);","highlight_start":63,"highlight_end":74}],"label":null,"suggested_replacement":"84_660_000","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null},{"message":"if you mean to use an octal constant, use `0o`","code":null,"level":"help","spans":[{"file_name":"src/datetime.rs","byte_start":82095,"byte_end":82106,"line_start":2335,"line_end":2335,"column_start":63,"column_end":74,"is_primary":true,"text":[{"text":"        let dt = pst.ymd(2018, 1, 11).and_hms_nano(10, 5, 13, 084_660_000);","highlight_start":63,"highlight_end":74}],"label":null,"suggested_replacement":"0o84_660_000","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this is a decimal constant\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/datetime.rs:2335:63\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2335\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let dt = pst.ymd(2018, 1, 11).and_hms_nano(10, 5, 13, 084_660_000);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::zero_prefixed_literal)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_prefixed_literal\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: if you mean to use a decimal constant, remove the `0` to avoid confusion\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2335\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let dt = pst.ymd(2018, 1, 11).and_hms_nano(10, 5, 13, \u001b[0m\u001b[0m\u001b[38;5;10m84_660_000\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: if you mean to use an octal constant, use `0o`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2335\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let dt = pst.ymd(2018, 1, 11).and_hms_nano(10, 5, 13, \u001b[0m\u001b[0m\u001b[38;5;10m0o84_660_000\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~\u001b[0m\n\n"}
{"message":"this is a decimal constant","code":{"code":"clippy::zero_prefixed_literal","explanation":null},"level":"warning","spans":[{"file_name":"src/datetime.rs","byte_start":90895,"byte_end":90897,"line_start":2562,"line_end":2562,"column_start":38,"column_end":40,"is_primary":true,"text":[{"text":"        let datetime = Utc.ymd(2007, 01, 02);","highlight_start":38,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_prefixed_literal","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"if you mean to use a decimal constant, remove the `0` to avoid confusion","code":null,"level":"help","spans":[{"file_name":"src/datetime.rs","byte_start":90895,"byte_end":90897,"line_start":2562,"line_end":2562,"column_start":38,"column_end":40,"is_primary":true,"text":[{"text":"        let datetime = Utc.ymd(2007, 01, 02);","highlight_start":38,"highlight_end":40}],"label":null,"suggested_replacement":"1","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null},{"message":"if you mean to use an octal constant, use `0o`","code":null,"level":"help","spans":[{"file_name":"src/datetime.rs","byte_start":90895,"byte_end":90897,"line_start":2562,"line_end":2562,"column_start":38,"column_end":40,"is_primary":true,"text":[{"text":"        let datetime = Utc.ymd(2007, 01, 02);","highlight_start":38,"highlight_end":40}],"label":null,"suggested_replacement":"0o1","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this is a decimal constant\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/datetime.rs:2562:38\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2562\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let datetime = Utc.ymd(2007, 01, 02);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_prefixed_literal\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: if you mean to use a decimal constant, remove the `0` to avoid confusion\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2562\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let datetime = Utc.ymd(2007, \u001b[0m\u001b[0m\u001b[38;5;10m1\u001b[0m\u001b[0m, 02);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[38;5;10m~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: if you mean to use an octal constant, use `0o`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2562\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let datetime = Utc.ymd(2007, \u001b[0m\u001b[0m\u001b[38;5;10m0o1\u001b[0m\u001b[0m, 02);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[38;5;10m~~~\u001b[0m\n\n"}
{"message":"this is a decimal constant","code":{"code":"clippy::zero_prefixed_literal","explanation":null},"level":"warning","spans":[{"file_name":"src/datetime.rs","byte_start":90899,"byte_end":90901,"line_start":2562,"line_end":2562,"column_start":42,"column_end":44,"is_primary":true,"text":[{"text":"        let datetime = Utc.ymd(2007, 01, 02);","highlight_start":42,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_prefixed_literal","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"if you mean to use a decimal constant, remove the `0` to avoid confusion","code":null,"level":"help","spans":[{"file_name":"src/datetime.rs","byte_start":90899,"byte_end":90901,"line_start":2562,"line_end":2562,"column_start":42,"column_end":44,"is_primary":true,"text":[{"text":"        let datetime = Utc.ymd(2007, 01, 02);","highlight_start":42,"highlight_end":44}],"label":null,"suggested_replacement":"2","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null},{"message":"if you mean to use an octal constant, use `0o`","code":null,"level":"help","spans":[{"file_name":"src/datetime.rs","byte_start":90899,"byte_end":90901,"line_start":2562,"line_end":2562,"column_start":42,"column_end":44,"is_primary":true,"text":[{"text":"        let datetime = Utc.ymd(2007, 01, 02);","highlight_start":42,"highlight_end":44}],"label":null,"suggested_replacement":"0o2","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this is a decimal constant\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/datetime.rs:2562:42\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2562\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let datetime = Utc.ymd(2007, 01, 02);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_prefixed_literal\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: if you mean to use a decimal constant, remove the `0` to avoid confusion\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2562\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let datetime = Utc.ymd(2007, 01, \u001b[0m\u001b[0m\u001b[38;5;10m2\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[38;5;10m~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: if you mean to use an octal constant, use `0o`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2562\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let datetime = Utc.ymd(2007, 01, \u001b[0m\u001b[0m\u001b[38;5;10m0o2\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[38;5;10m~~~\u001b[0m\n\n"}
{"message":"this seems like a manual implementation of the non-exhaustive pattern","code":{"code":"clippy::manual_non_exhaustive","explanation":null},"level":"warning","spans":[{"file_name":"src/format/parsed.rs","byte_start":1023,"byte_end":4168,"line_start":27,"line_end":111,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub struct Parsed {","highlight_start":1,"highlight_end":20},{"text":"    /// Year.","highlight_start":1,"highlight_end":14},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// This can be negative unlike [`year_div_100`](#structfield.year_div_100)","highlight_start":1,"highlight_end":80},{"text":"    /// and [`year_mod_100`](#structfield.year_mod_100) fields.","highlight_start":1,"highlight_end":64},{"text":"    pub year: Option<i32>,","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Year divided by 100. Implies that the year is >= 1 BCE when set.","highlight_start":1,"highlight_end":73},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// Due to the common usage, if this field is missing but","highlight_start":1,"highlight_end":62},{"text":"    /// [`year_mod_100`](#structfield.year_mod_100) is present,","highlight_start":1,"highlight_end":64},{"text":"    /// it is inferred to 19 when `year_mod_100 >= 70` and 20 otherwise.","highlight_start":1,"highlight_end":73},{"text":"    pub year_div_100: Option<i32>,","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Year modulo 100. Implies that the year is >= 1 BCE when set.","highlight_start":1,"highlight_end":69},{"text":"    pub year_mod_100: Option<i32>,","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date).","highlight_start":1,"highlight_end":79},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// This can be negative unlike [`isoyear_div_100`](#structfield.isoyear_div_100) and","highlight_start":1,"highlight_end":90},{"text":"    /// [`isoyear_mod_100`](#structfield.isoyear_mod_100) fields.","highlight_start":1,"highlight_end":66},{"text":"    pub isoyear: Option<i32>,","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date), divided by 100.","highlight_start":1,"highlight_end":95},{"text":"    /// Implies that the year is >= 1 BCE when set.","highlight_start":1,"highlight_end":52},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// Due to the common usage, if this field is missing but","highlight_start":1,"highlight_end":62},{"text":"    /// [`isoyear_mod_100`](#structfield.isoyear_mod_100) is present,","highlight_start":1,"highlight_end":70},{"text":"    /// it is inferred to 19 when `isoyear_mod_100 >= 70` and 20 otherwise.","highlight_start":1,"highlight_end":76},{"text":"    pub isoyear_div_100: Option<i32>,","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date), modulo 100.","highlight_start":1,"highlight_end":91},{"text":"    /// Implies that the year is >= 1 BCE when set.","highlight_start":1,"highlight_end":52},{"text":"    pub isoyear_mod_100: Option<i32>,","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Month (1--12).","highlight_start":1,"highlight_end":23},{"text":"    pub month: Option<u32>,","highlight_start":1,"highlight_end":28},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Week number, where the week 1 starts at the first Sunday of January","highlight_start":1,"highlight_end":76},{"text":"    /// (0--53, 1--53 or 1--52 depending on the year).","highlight_start":1,"highlight_end":55},{"text":"    pub week_from_sun: Option<u32>,","highlight_start":1,"highlight_end":36},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Week number, where the week 1 starts at the first Monday of January","highlight_start":1,"highlight_end":76},{"text":"    /// (0--53, 1--53 or 1--52 depending on the year).","highlight_start":1,"highlight_end":55},{"text":"    pub week_from_mon: Option<u32>,","highlight_start":1,"highlight_end":36},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// [ISO week number](../naive/struct.NaiveDate.html#week-date)","highlight_start":1,"highlight_end":68},{"text":"    /// (1--52 or 1--53 depending on the year).","highlight_start":1,"highlight_end":48},{"text":"    pub isoweek: Option<u32>,","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Day of the week.","highlight_start":1,"highlight_end":25},{"text":"    pub weekday: Option<Weekday>,","highlight_start":1,"highlight_end":34},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Day of the year (1--365 or 1--366 depending on the year).","highlight_start":1,"highlight_end":66},{"text":"    pub ordinal: Option<u32>,","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Day of the month (1--28, 1--29, 1--30 or 1--31 depending on the month).","highlight_start":1,"highlight_end":80},{"text":"    pub day: Option<u32>,","highlight_start":1,"highlight_end":26},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Hour number divided by 12 (0--1). 0 indicates AM and 1 indicates PM.","highlight_start":1,"highlight_end":77},{"text":"    pub hour_div_12: Option<u32>,","highlight_start":1,"highlight_end":34},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Hour number modulo 12 (0--11).","highlight_start":1,"highlight_end":39},{"text":"    pub hour_mod_12: Option<u32>,","highlight_start":1,"highlight_end":34},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Minute number (0--59).","highlight_start":1,"highlight_end":31},{"text":"    pub minute: Option<u32>,","highlight_start":1,"highlight_end":29},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Second number (0--60, accounting for leap seconds).","highlight_start":1,"highlight_end":60},{"text":"    pub second: Option<u32>,","highlight_start":1,"highlight_end":29},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// The number of nanoseconds since the whole second (0--999,999,999).","highlight_start":1,"highlight_end":75},{"text":"    pub nanosecond: Option<u32>,","highlight_start":1,"highlight_end":33},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// The number of non-leap seconds since the midnight UTC on January 1, 1970.","highlight_start":1,"highlight_end":82},{"text":"    ///","highlight_start":1,"highlight_end":8},{"text":"    /// This can be off by one if [`second`](#structfield.second) is 60 (a leap second).","highlight_start":1,"highlight_end":89},{"text":"    pub timestamp: Option<i64>,","highlight_start":1,"highlight_end":32},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Offset from the local time to UTC, in seconds.","highlight_start":1,"highlight_end":55},{"text":"    pub offset: Option<i32>,","highlight_start":1,"highlight_end":29},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// A dummy field to make this type not fully destructible (required for API stability).","highlight_start":1,"highlight_end":93},{"text":"    _dummy: (),","highlight_start":1,"highlight_end":16},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove this field","code":null,"level":"help","spans":[{"file_name":"src/format/parsed.rs","byte_start":4155,"byte_end":4165,"line_start":110,"line_end":110,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"    _dummy: (),","highlight_start":5,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_non_exhaustive","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add the attribute","code":null,"level":"help","spans":[{"file_name":"src/format/parsed.rs","byte_start":1023,"byte_end":1040,"line_start":27,"line_end":27,"column_start":1,"column_end":18,"is_primary":true,"text":[{"text":"pub struct Parsed {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":"#[non_exhaustive] pub struct Parsed","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this seems like a manual implementation of the non-exhaustive pattern\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/format/parsed.rs:27:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mpub struct Parsed {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m_\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: add the attribute: `#[non_exhaustive] pub struct Parsed`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// Year.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ///\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// This can be negative unlike [`year_div_100`](#structfield.year_div_100)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m110\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    _dummy: (),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m111\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove this field\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/format/parsed.rs:110:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m110\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    _dummy: (),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_non_exhaustive\u001b[0m\n\n"}
{"message":"this is a decimal constant","code":{"code":"clippy::zero_prefixed_literal","explanation":null},"level":"warning","spans":[{"file_name":"src/round.rs","byte_start":9704,"byte_end":9715,"line_start":277,"line_end":277,"column_start":63,"column_end":74,"is_primary":true,"text":[{"text":"        let dt = pst.ymd(2018, 1, 11).and_hms_nano(10, 5, 13, 084_660_684);","highlight_start":63,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_prefixed_literal","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"if you mean to use a decimal constant, remove the `0` to avoid confusion","code":null,"level":"help","spans":[{"file_name":"src/round.rs","byte_start":9704,"byte_end":9715,"line_start":277,"line_end":277,"column_start":63,"column_end":74,"is_primary":true,"text":[{"text":"        let dt = pst.ymd(2018, 1, 11).and_hms_nano(10, 5, 13, 084_660_684);","highlight_start":63,"highlight_end":74}],"label":null,"suggested_replacement":"84_660_684","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null},{"message":"if you mean to use an octal constant, use `0o`","code":null,"level":"help","spans":[{"file_name":"src/round.rs","byte_start":9704,"byte_end":9715,"line_start":277,"line_end":277,"column_start":63,"column_end":74,"is_primary":true,"text":[{"text":"        let dt = pst.ymd(2018, 1, 11).and_hms_nano(10, 5, 13, 084_660_684);","highlight_start":63,"highlight_end":74}],"label":null,"suggested_replacement":"0o84_660_684","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this is a decimal constant\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/round.rs:277:63\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m277\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let dt = pst.ymd(2018, 1, 11).and_hms_nano(10, 5, 13, 084_660_684);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_prefixed_literal\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: if you mean to use a decimal constant, remove the `0` to avoid confusion\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m277\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let dt = pst.ymd(2018, 1, 11).and_hms_nano(10, 5, 13, \u001b[0m\u001b[0m\u001b[38;5;10m84_660_684\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: if you mean to use an octal constant, use `0o`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m277\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let dt = pst.ymd(2018, 1, 11).and_hms_nano(10, 5, 13, \u001b[0m\u001b[0m\u001b[38;5;10m0o84_660_684\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~\u001b[0m\n\n"}
{"message":"this is a decimal constant","code":{"code":"clippy::zero_prefixed_literal","explanation":null},"level":"warning","spans":[{"file_name":"src/round.rs","byte_start":9863,"byte_end":9874,"line_start":281,"line_end":281,"column_start":54,"column_end":65,"is_primary":true,"text":[{"text":"        assert_eq!(dt.round_subsecs(8).nanosecond(), 084_660_680);","highlight_start":54,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_prefixed_literal","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"if you mean to use a decimal constant, remove the `0` to avoid confusion","code":null,"level":"help","spans":[{"file_name":"src/round.rs","byte_start":9863,"byte_end":9874,"line_start":281,"line_end":281,"column_start":54,"column_end":65,"is_primary":true,"text":[{"text":"        assert_eq!(dt.round_subsecs(8).nanosecond(), 084_660_680);","highlight_start":54,"highlight_end":65}],"label":null,"suggested_replacement":"84_660_680","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null},{"message":"if you mean to use an octal constant, use `0o`","code":null,"level":"help","spans":[{"file_name":"src/round.rs","byte_start":9863,"byte_end":9874,"line_start":281,"line_end":281,"column_start":54,"column_end":65,"is_primary":true,"text":[{"text":"        assert_eq!(dt.round_subsecs(8).nanosecond(), 084_660_680);","highlight_start":54,"highlight_end":65}],"label":null,"suggested_replacement":"0o84_660_680","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this is a decimal constant\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/round.rs:281:54\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m281\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        assert_eq!(dt.round_subsecs(8).nanosecond(), 084_660_680);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_prefixed_literal\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: if you mean to use a decimal constant, remove the `0` to avoid confusion\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m281\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        assert_eq!(dt.round_subsecs(8).nanosecond(), \u001b[0m\u001b[0m\u001b[38;5;10m84_660_680\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: if you mean to use an octal constant, use `0o`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m281\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        assert_eq!(dt.round_subsecs(8).nanosecond(), \u001b[0m\u001b[0m\u001b[38;5;10m0o84_660_680\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~\u001b[0m\n\n"}
{"message":"this is a decimal constant","code":{"code":"clippy::zero_prefixed_literal","explanation":null},"level":"warning","spans":[{"file_name":"src/round.rs","byte_start":9930,"byte_end":9941,"line_start":282,"line_end":282,"column_start":54,"column_end":65,"is_primary":true,"text":[{"text":"        assert_eq!(dt.round_subsecs(7).nanosecond(), 084_660_700);","highlight_start":54,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_prefixed_literal","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"if you mean to use a decimal constant, remove the `0` to avoid confusion","code":null,"level":"help","spans":[{"file_name":"src/round.rs","byte_start":9930,"byte_end":9941,"line_start":282,"line_end":282,"column_start":54,"column_end":65,"is_primary":true,"text":[{"text":"        assert_eq!(dt.round_subsecs(7).nanosecond(), 084_660_700);","highlight_start":54,"highlight_end":65}],"label":null,"suggested_replacement":"84_660_700","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null},{"message":"if you mean to use an octal constant, use `0o`","code":null,"level":"help","spans":[{"file_name":"src/round.rs","byte_start":9930,"byte_end":9941,"line_start":282,"line_end":282,"column_start":54,"column_end":65,"is_primary":true,"text":[{"text":"        assert_eq!(dt.round_subsecs(7).nanosecond(), 084_660_700);","highlight_start":54,"highlight_end":65}],"label":null,"suggested_replacement":"0o84_660_700","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this is a decimal constant\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/round.rs:282:54\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m282\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        assert_eq!(dt.round_subsecs(7).nanosecond(), 084_660_700);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_prefixed_literal\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: if you mean to use a decimal constant, remove the `0` to avoid confusion\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m282\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        assert_eq!(dt.round_subsecs(7).nanosecond(), \u001b[0m\u001b[0m\u001b[38;5;10m84_660_700\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: if you mean to use an octal constant, use `0o`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m282\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        assert_eq!(dt.round_subsecs(7).nanosecond(), \u001b[0m\u001b[0m\u001b[38;5;10m0o84_660_700\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~\u001b[0m\n\n"}
{"message":"this is a decimal constant","code":{"code":"clippy::zero_prefixed_literal","explanation":null},"level":"warning","spans":[{"file_name":"src/round.rs","byte_start":9997,"byte_end":10008,"line_start":283,"line_end":283,"column_start":54,"column_end":65,"is_primary":true,"text":[{"text":"        assert_eq!(dt.round_subsecs(6).nanosecond(), 084_661_000);","highlight_start":54,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_prefixed_literal","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"if you mean to use a decimal constant, remove the `0` to avoid confusion","code":null,"level":"help","spans":[{"file_name":"src/round.rs","byte_start":9997,"byte_end":10008,"line_start":283,"line_end":283,"column_start":54,"column_end":65,"is_primary":true,"text":[{"text":"        assert_eq!(dt.round_subsecs(6).nanosecond(), 084_661_000);","highlight_start":54,"highlight_end":65}],"label":null,"suggested_replacement":"84_661_000","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null},{"message":"if you mean to use an octal constant, use `0o`","code":null,"level":"help","spans":[{"file_name":"src/round.rs","byte_start":9997,"byte_end":10008,"line_start":283,"line_end":283,"column_start":54,"column_end":65,"is_primary":true,"text":[{"text":"        assert_eq!(dt.round_subsecs(6).nanosecond(), 084_661_000);","highlight_start":54,"highlight_end":65}],"label":null,"suggested_replacement":"0o84_661_000","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this is a decimal constant\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/round.rs:283:54\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m283\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        assert_eq!(dt.round_subsecs(6).nanosecond(), 084_661_000);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_prefixed_literal\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: if you mean to use a decimal constant, remove the `0` to avoid confusion\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m283\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        assert_eq!(dt.round_subsecs(6).nanosecond(), \u001b[0m\u001b[0m\u001b[38;5;10m84_661_000\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: if you mean to use an octal constant, use `0o`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m283\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        assert_eq!(dt.round_subsecs(6).nanosecond(), \u001b[0m\u001b[0m\u001b[38;5;10m0o84_661_000\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~\u001b[0m\n\n"}
{"message":"this is a decimal constant","code":{"code":"clippy::zero_prefixed_literal","explanation":null},"level":"warning","spans":[{"file_name":"src/round.rs","byte_start":10064,"byte_end":10075,"line_start":284,"line_end":284,"column_start":54,"column_end":65,"is_primary":true,"text":[{"text":"        assert_eq!(dt.round_subsecs(5).nanosecond(), 084_660_000);","highlight_start":54,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_prefixed_literal","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"if you mean to use a decimal constant, remove the `0` to avoid confusion","code":null,"level":"help","spans":[{"file_name":"src/round.rs","byte_start":10064,"byte_end":10075,"line_start":284,"line_end":284,"column_start":54,"column_end":65,"is_primary":true,"text":[{"text":"        assert_eq!(dt.round_subsecs(5).nanosecond(), 084_660_000);","highlight_start":54,"highlight_end":65}],"label":null,"suggested_replacement":"84_660_000","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null},{"message":"if you mean to use an octal constant, use `0o`","code":null,"level":"help","spans":[{"file_name":"src/round.rs","byte_start":10064,"byte_end":10075,"line_start":284,"line_end":284,"column_start":54,"column_end":65,"is_primary":true,"text":[{"text":"        assert_eq!(dt.round_subsecs(5).nanosecond(), 084_660_000);","highlight_start":54,"highlight_end":65}],"label":null,"suggested_replacement":"0o84_660_000","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this is a decimal constant\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/round.rs:284:54\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m284\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        assert_eq!(dt.round_subsecs(5).nanosecond(), 084_660_000);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_prefixed_literal\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: if you mean to use a decimal constant, remove the `0` to avoid confusion\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m284\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        assert_eq!(dt.round_subsecs(5).nanosecond(), \u001b[0m\u001b[0m\u001b[38;5;10m84_660_000\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: if you mean to use an octal constant, use `0o`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m284\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        assert_eq!(dt.round_subsecs(5).nanosecond(), \u001b[0m\u001b[0m\u001b[38;5;10m0o84_660_000\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~\u001b[0m\n\n"}
{"message":"this is a decimal constant","code":{"code":"clippy::zero_prefixed_literal","explanation":null},"level":"warning","spans":[{"file_name":"src/round.rs","byte_start":10131,"byte_end":10142,"line_start":285,"line_end":285,"column_start":54,"column_end":65,"is_primary":true,"text":[{"text":"        assert_eq!(dt.round_subsecs(4).nanosecond(), 084_700_000);","highlight_start":54,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_prefixed_literal","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"if you mean to use a decimal constant, remove the `0` to avoid confusion","code":null,"level":"help","spans":[{"file_name":"src/round.rs","byte_start":10131,"byte_end":10142,"line_start":285,"line_end":285,"column_start":54,"column_end":65,"is_primary":true,"text":[{"text":"        assert_eq!(dt.round_subsecs(4).nanosecond(), 084_700_000);","highlight_start":54,"highlight_end":65}],"label":null,"suggested_replacement":"84_700_000","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null},{"message":"if you mean to use an octal constant, use `0o`","code":null,"level":"help","spans":[{"file_name":"src/round.rs","byte_start":10131,"byte_end":10142,"line_start":285,"line_end":285,"column_start":54,"column_end":65,"is_primary":true,"text":[{"text":"        assert_eq!(dt.round_subsecs(4).nanosecond(), 084_700_000);","highlight_start":54,"highlight_end":65}],"label":null,"suggested_replacement":"0o84_700_000","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this is a decimal constant\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/round.rs:285:54\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m285\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        assert_eq!(dt.round_subsecs(4).nanosecond(), 084_700_000);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_prefixed_literal\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: if you mean to use a decimal constant, remove the `0` to avoid confusion\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m285\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        assert_eq!(dt.round_subsecs(4).nanosecond(), \u001b[0m\u001b[0m\u001b[38;5;10m84_700_000\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: if you mean to use an octal constant, use `0o`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m285\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        assert_eq!(dt.round_subsecs(4).nanosecond(), \u001b[0m\u001b[0m\u001b[38;5;10m0o84_700_000\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~\u001b[0m\n\n"}
{"message":"this is a decimal constant","code":{"code":"clippy::zero_prefixed_literal","explanation":null},"level":"warning","spans":[{"file_name":"src/round.rs","byte_start":10198,"byte_end":10209,"line_start":286,"line_end":286,"column_start":54,"column_end":65,"is_primary":true,"text":[{"text":"        assert_eq!(dt.round_subsecs(3).nanosecond(), 085_000_000);","highlight_start":54,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_prefixed_literal","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"if you mean to use a decimal constant, remove the `0` to avoid confusion","code":null,"level":"help","spans":[{"file_name":"src/round.rs","byte_start":10198,"byte_end":10209,"line_start":286,"line_end":286,"column_start":54,"column_end":65,"is_primary":true,"text":[{"text":"        assert_eq!(dt.round_subsecs(3).nanosecond(), 085_000_000);","highlight_start":54,"highlight_end":65}],"label":null,"suggested_replacement":"85_000_000","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null},{"message":"if you mean to use an octal constant, use `0o`","code":null,"level":"help","spans":[{"file_name":"src/round.rs","byte_start":10198,"byte_end":10209,"line_start":286,"line_end":286,"column_start":54,"column_end":65,"is_primary":true,"text":[{"text":"        assert_eq!(dt.round_subsecs(3).nanosecond(), 085_000_000);","highlight_start":54,"highlight_end":65}],"label":null,"suggested_replacement":"0o85_000_000","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this is a decimal constant\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/round.rs:286:54\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m286\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        assert_eq!(dt.round_subsecs(3).nanosecond(), 085_000_000);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_prefixed_literal\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: if you mean to use a decimal constant, remove the `0` to avoid confusion\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m286\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        assert_eq!(dt.round_subsecs(3).nanosecond(), \u001b[0m\u001b[0m\u001b[38;5;10m85_000_000\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: if you mean to use an octal constant, use `0o`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m286\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        assert_eq!(dt.round_subsecs(3).nanosecond(), \u001b[0m\u001b[0m\u001b[38;5;10m0o85_000_000\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~\u001b[0m\n\n"}
{"message":"this is a decimal constant","code":{"code":"clippy::zero_prefixed_literal","explanation":null},"level":"warning","spans":[{"file_name":"src/round.rs","byte_start":10265,"byte_end":10276,"line_start":287,"line_end":287,"column_start":54,"column_end":65,"is_primary":true,"text":[{"text":"        assert_eq!(dt.round_subsecs(2).nanosecond(), 080_000_000);","highlight_start":54,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_prefixed_literal","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"if you mean to use a decimal constant, remove the `0` to avoid confusion","code":null,"level":"help","spans":[{"file_name":"src/round.rs","byte_start":10265,"byte_end":10276,"line_start":287,"line_end":287,"column_start":54,"column_end":65,"is_primary":true,"text":[{"text":"        assert_eq!(dt.round_subsecs(2).nanosecond(), 080_000_000);","highlight_start":54,"highlight_end":65}],"label":null,"suggested_replacement":"80_000_000","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null},{"message":"if you mean to use an octal constant, use `0o`","code":null,"level":"help","spans":[{"file_name":"src/round.rs","byte_start":10265,"byte_end":10276,"line_start":287,"line_end":287,"column_start":54,"column_end":65,"is_primary":true,"text":[{"text":"        assert_eq!(dt.round_subsecs(2).nanosecond(), 080_000_000);","highlight_start":54,"highlight_end":65}],"label":null,"suggested_replacement":"0o80_000_000","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this is a decimal constant\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/round.rs:287:54\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m287\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        assert_eq!(dt.round_subsecs(2).nanosecond(), 080_000_000);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_prefixed_literal\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: if you mean to use a decimal constant, remove the `0` to avoid confusion\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m287\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        assert_eq!(dt.round_subsecs(2).nanosecond(), \u001b[0m\u001b[0m\u001b[38;5;10m80_000_000\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: if you mean to use an octal constant, use `0o`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m287\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        assert_eq!(dt.round_subsecs(2).nanosecond(), \u001b[0m\u001b[0m\u001b[38;5;10m0o80_000_000\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~\u001b[0m\n\n"}
{"message":"this is a decimal constant","code":{"code":"clippy::zero_prefixed_literal","explanation":null},"level":"warning","spans":[{"file_name":"src/round.rs","byte_start":11624,"byte_end":11635,"line_start":320,"line_end":320,"column_start":63,"column_end":74,"is_primary":true,"text":[{"text":"        let dt = pst.ymd(2018, 1, 11).and_hms_nano(10, 5, 13, 084_660_684);","highlight_start":63,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_prefixed_literal","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"if you mean to use a decimal constant, remove the `0` to avoid confusion","code":null,"level":"help","spans":[{"file_name":"src/round.rs","byte_start":11624,"byte_end":11635,"line_start":320,"line_end":320,"column_start":63,"column_end":74,"is_primary":true,"text":[{"text":"        let dt = pst.ymd(2018, 1, 11).and_hms_nano(10, 5, 13, 084_660_684);","highlight_start":63,"highlight_end":74}],"label":null,"suggested_replacement":"84_660_684","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null},{"message":"if you mean to use an octal constant, use `0o`","code":null,"level":"help","spans":[{"file_name":"src/round.rs","byte_start":11624,"byte_end":11635,"line_start":320,"line_end":320,"column_start":63,"column_end":74,"is_primary":true,"text":[{"text":"        let dt = pst.ymd(2018, 1, 11).and_hms_nano(10, 5, 13, 084_660_684);","highlight_start":63,"highlight_end":74}],"label":null,"suggested_replacement":"0o84_660_684","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this is a decimal constant\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/round.rs:320:63\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m320\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let dt = pst.ymd(2018, 1, 11).and_hms_nano(10, 5, 13, 084_660_684);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_prefixed_literal\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: if you mean to use a decimal constant, remove the `0` to avoid confusion\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m320\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let dt = pst.ymd(2018, 1, 11).and_hms_nano(10, 5, 13, \u001b[0m\u001b[0m\u001b[38;5;10m84_660_684\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: if you mean to use an octal constant, use `0o`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m320\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let dt = pst.ymd(2018, 1, 11).and_hms_nano(10, 5, 13, \u001b[0m\u001b[0m\u001b[38;5;10m0o84_660_684\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~\u001b[0m\n\n"}
{"message":"this is a decimal constant","code":{"code":"clippy::zero_prefixed_literal","explanation":null},"level":"warning","spans":[{"file_name":"src/round.rs","byte_start":11783,"byte_end":11794,"line_start":324,"line_end":324,"column_start":54,"column_end":65,"is_primary":true,"text":[{"text":"        assert_eq!(dt.trunc_subsecs(8).nanosecond(), 084_660_680);","highlight_start":54,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_prefixed_literal","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"if you mean to use a decimal constant, remove the `0` to avoid confusion","code":null,"level":"help","spans":[{"file_name":"src/round.rs","byte_start":11783,"byte_end":11794,"line_start":324,"line_end":324,"column_start":54,"column_end":65,"is_primary":true,"text":[{"text":"        assert_eq!(dt.trunc_subsecs(8).nanosecond(), 084_660_680);","highlight_start":54,"highlight_end":65}],"label":null,"suggested_replacement":"84_660_680","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null},{"message":"if you mean to use an octal constant, use `0o`","code":null,"level":"help","spans":[{"file_name":"src/round.rs","byte_start":11783,"byte_end":11794,"line_start":324,"line_end":324,"column_start":54,"column_end":65,"is_primary":true,"text":[{"text":"        assert_eq!(dt.trunc_subsecs(8).nanosecond(), 084_660_680);","highlight_start":54,"highlight_end":65}],"label":null,"suggested_replacement":"0o84_660_680","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this is a decimal constant\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/round.rs:324:54\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m324\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        assert_eq!(dt.trunc_subsecs(8).nanosecond(), 084_660_680);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_prefixed_literal\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: if you mean to use a decimal constant, remove the `0` to avoid confusion\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m324\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        assert_eq!(dt.trunc_subsecs(8).nanosecond(), \u001b[0m\u001b[0m\u001b[38;5;10m84_660_680\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: if you mean to use an octal constant, use `0o`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m324\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        assert_eq!(dt.trunc_subsecs(8).nanosecond(), \u001b[0m\u001b[0m\u001b[38;5;10m0o84_660_680\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~\u001b[0m\n\n"}
{"message":"this is a decimal constant","code":{"code":"clippy::zero_prefixed_literal","explanation":null},"level":"warning","spans":[{"file_name":"src/round.rs","byte_start":11850,"byte_end":11861,"line_start":325,"line_end":325,"column_start":54,"column_end":65,"is_primary":true,"text":[{"text":"        assert_eq!(dt.trunc_subsecs(7).nanosecond(), 084_660_600);","highlight_start":54,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_prefixed_literal","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"if you mean to use a decimal constant, remove the `0` to avoid confusion","code":null,"level":"help","spans":[{"file_name":"src/round.rs","byte_start":11850,"byte_end":11861,"line_start":325,"line_end":325,"column_start":54,"column_end":65,"is_primary":true,"text":[{"text":"        assert_eq!(dt.trunc_subsecs(7).nanosecond(), 084_660_600);","highlight_start":54,"highlight_end":65}],"label":null,"suggested_replacement":"84_660_600","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null},{"message":"if you mean to use an octal constant, use `0o`","code":null,"level":"help","spans":[{"file_name":"src/round.rs","byte_start":11850,"byte_end":11861,"line_start":325,"line_end":325,"column_start":54,"column_end":65,"is_primary":true,"text":[{"text":"        assert_eq!(dt.trunc_subsecs(7).nanosecond(), 084_660_600);","highlight_start":54,"highlight_end":65}],"label":null,"suggested_replacement":"0o84_660_600","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this is a decimal constant\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/round.rs:325:54\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m325\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        assert_eq!(dt.trunc_subsecs(7).nanosecond(), 084_660_600);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_prefixed_literal\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: if you mean to use a decimal constant, remove the `0` to avoid confusion\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m325\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        assert_eq!(dt.trunc_subsecs(7).nanosecond(), \u001b[0m\u001b[0m\u001b[38;5;10m84_660_600\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: if you mean to use an octal constant, use `0o`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m325\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        assert_eq!(dt.trunc_subsecs(7).nanosecond(), \u001b[0m\u001b[0m\u001b[38;5;10m0o84_660_600\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~\u001b[0m\n\n"}
{"message":"this is a decimal constant","code":{"code":"clippy::zero_prefixed_literal","explanation":null},"level":"warning","spans":[{"file_name":"src/round.rs","byte_start":11917,"byte_end":11928,"line_start":326,"line_end":326,"column_start":54,"column_end":65,"is_primary":true,"text":[{"text":"        assert_eq!(dt.trunc_subsecs(6).nanosecond(), 084_660_000);","highlight_start":54,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_prefixed_literal","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"if you mean to use a decimal constant, remove the `0` to avoid confusion","code":null,"level":"help","spans":[{"file_name":"src/round.rs","byte_start":11917,"byte_end":11928,"line_start":326,"line_end":326,"column_start":54,"column_end":65,"is_primary":true,"text":[{"text":"        assert_eq!(dt.trunc_subsecs(6).nanosecond(), 084_660_000);","highlight_start":54,"highlight_end":65}],"label":null,"suggested_replacement":"84_660_000","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null},{"message":"if you mean to use an octal constant, use `0o`","code":null,"level":"help","spans":[{"file_name":"src/round.rs","byte_start":11917,"byte_end":11928,"line_start":326,"line_end":326,"column_start":54,"column_end":65,"is_primary":true,"text":[{"text":"        assert_eq!(dt.trunc_subsecs(6).nanosecond(), 084_660_000);","highlight_start":54,"highlight_end":65}],"label":null,"suggested_replacement":"0o84_660_000","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this is a decimal constant\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/round.rs:326:54\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m326\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        assert_eq!(dt.trunc_subsecs(6).nanosecond(), 084_660_000);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_prefixed_literal\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: if you mean to use a decimal constant, remove the `0` to avoid confusion\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m326\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        assert_eq!(dt.trunc_subsecs(6).nanosecond(), \u001b[0m\u001b[0m\u001b[38;5;10m84_660_000\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: if you mean to use an octal constant, use `0o`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m326\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        assert_eq!(dt.trunc_subsecs(6).nanosecond(), \u001b[0m\u001b[0m\u001b[38;5;10m0o84_660_000\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~\u001b[0m\n\n"}
{"message":"this is a decimal constant","code":{"code":"clippy::zero_prefixed_literal","explanation":null},"level":"warning","spans":[{"file_name":"src/round.rs","byte_start":11984,"byte_end":11995,"line_start":327,"line_end":327,"column_start":54,"column_end":65,"is_primary":true,"text":[{"text":"        assert_eq!(dt.trunc_subsecs(5).nanosecond(), 084_660_000);","highlight_start":54,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_prefixed_literal","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"if you mean to use a decimal constant, remove the `0` to avoid confusion","code":null,"level":"help","spans":[{"file_name":"src/round.rs","byte_start":11984,"byte_end":11995,"line_start":327,"line_end":327,"column_start":54,"column_end":65,"is_primary":true,"text":[{"text":"        assert_eq!(dt.trunc_subsecs(5).nanosecond(), 084_660_000);","highlight_start":54,"highlight_end":65}],"label":null,"suggested_replacement":"84_660_000","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null},{"message":"if you mean to use an octal constant, use `0o`","code":null,"level":"help","spans":[{"file_name":"src/round.rs","byte_start":11984,"byte_end":11995,"line_start":327,"line_end":327,"column_start":54,"column_end":65,"is_primary":true,"text":[{"text":"        assert_eq!(dt.trunc_subsecs(5).nanosecond(), 084_660_000);","highlight_start":54,"highlight_end":65}],"label":null,"suggested_replacement":"0o84_660_000","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this is a decimal constant\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/round.rs:327:54\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m327\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        assert_eq!(dt.trunc_subsecs(5).nanosecond(), 084_660_000);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_prefixed_literal\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: if you mean to use a decimal constant, remove the `0` to avoid confusion\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m327\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        assert_eq!(dt.trunc_subsecs(5).nanosecond(), \u001b[0m\u001b[0m\u001b[38;5;10m84_660_000\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: if you mean to use an octal constant, use `0o`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m327\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        assert_eq!(dt.trunc_subsecs(5).nanosecond(), \u001b[0m\u001b[0m\u001b[38;5;10m0o84_660_000\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~\u001b[0m\n\n"}
{"message":"this is a decimal constant","code":{"code":"clippy::zero_prefixed_literal","explanation":null},"level":"warning","spans":[{"file_name":"src/round.rs","byte_start":12051,"byte_end":12062,"line_start":328,"line_end":328,"column_start":54,"column_end":65,"is_primary":true,"text":[{"text":"        assert_eq!(dt.trunc_subsecs(4).nanosecond(), 084_600_000);","highlight_start":54,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_prefixed_literal","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"if you mean to use a decimal constant, remove the `0` to avoid confusion","code":null,"level":"help","spans":[{"file_name":"src/round.rs","byte_start":12051,"byte_end":12062,"line_start":328,"line_end":328,"column_start":54,"column_end":65,"is_primary":true,"text":[{"text":"        assert_eq!(dt.trunc_subsecs(4).nanosecond(), 084_600_000);","highlight_start":54,"highlight_end":65}],"label":null,"suggested_replacement":"84_600_000","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null},{"message":"if you mean to use an octal constant, use `0o`","code":null,"level":"help","spans":[{"file_name":"src/round.rs","byte_start":12051,"byte_end":12062,"line_start":328,"line_end":328,"column_start":54,"column_end":65,"is_primary":true,"text":[{"text":"        assert_eq!(dt.trunc_subsecs(4).nanosecond(), 084_600_000);","highlight_start":54,"highlight_end":65}],"label":null,"suggested_replacement":"0o84_600_000","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this is a decimal constant\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/round.rs:328:54\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m328\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        assert_eq!(dt.trunc_subsecs(4).nanosecond(), 084_600_000);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_prefixed_literal\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: if you mean to use a decimal constant, remove the `0` to avoid confusion\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m328\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        assert_eq!(dt.trunc_subsecs(4).nanosecond(), \u001b[0m\u001b[0m\u001b[38;5;10m84_600_000\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: if you mean to use an octal constant, use `0o`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m328\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        assert_eq!(dt.trunc_subsecs(4).nanosecond(), \u001b[0m\u001b[0m\u001b[38;5;10m0o84_600_000\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~\u001b[0m\n\n"}
{"message":"this is a decimal constant","code":{"code":"clippy::zero_prefixed_literal","explanation":null},"level":"warning","spans":[{"file_name":"src/round.rs","byte_start":12118,"byte_end":12129,"line_start":329,"line_end":329,"column_start":54,"column_end":65,"is_primary":true,"text":[{"text":"        assert_eq!(dt.trunc_subsecs(3).nanosecond(), 084_000_000);","highlight_start":54,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_prefixed_literal","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"if you mean to use a decimal constant, remove the `0` to avoid confusion","code":null,"level":"help","spans":[{"file_name":"src/round.rs","byte_start":12118,"byte_end":12129,"line_start":329,"line_end":329,"column_start":54,"column_end":65,"is_primary":true,"text":[{"text":"        assert_eq!(dt.trunc_subsecs(3).nanosecond(), 084_000_000);","highlight_start":54,"highlight_end":65}],"label":null,"suggested_replacement":"84_000_000","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null},{"message":"if you mean to use an octal constant, use `0o`","code":null,"level":"help","spans":[{"file_name":"src/round.rs","byte_start":12118,"byte_end":12129,"line_start":329,"line_end":329,"column_start":54,"column_end":65,"is_primary":true,"text":[{"text":"        assert_eq!(dt.trunc_subsecs(3).nanosecond(), 084_000_000);","highlight_start":54,"highlight_end":65}],"label":null,"suggested_replacement":"0o84_000_000","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this is a decimal constant\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/round.rs:329:54\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m329\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        assert_eq!(dt.trunc_subsecs(3).nanosecond(), 084_000_000);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_prefixed_literal\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: if you mean to use a decimal constant, remove the `0` to avoid confusion\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m329\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        assert_eq!(dt.trunc_subsecs(3).nanosecond(), \u001b[0m\u001b[0m\u001b[38;5;10m84_000_000\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: if you mean to use an octal constant, use `0o`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m329\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        assert_eq!(dt.trunc_subsecs(3).nanosecond(), \u001b[0m\u001b[0m\u001b[38;5;10m0o84_000_000\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~\u001b[0m\n\n"}
{"message":"this is a decimal constant","code":{"code":"clippy::zero_prefixed_literal","explanation":null},"level":"warning","spans":[{"file_name":"src/round.rs","byte_start":12185,"byte_end":12196,"line_start":330,"line_end":330,"column_start":54,"column_end":65,"is_primary":true,"text":[{"text":"        assert_eq!(dt.trunc_subsecs(2).nanosecond(), 080_000_000);","highlight_start":54,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_prefixed_literal","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"if you mean to use a decimal constant, remove the `0` to avoid confusion","code":null,"level":"help","spans":[{"file_name":"src/round.rs","byte_start":12185,"byte_end":12196,"line_start":330,"line_end":330,"column_start":54,"column_end":65,"is_primary":true,"text":[{"text":"        assert_eq!(dt.trunc_subsecs(2).nanosecond(), 080_000_000);","highlight_start":54,"highlight_end":65}],"label":null,"suggested_replacement":"80_000_000","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null},{"message":"if you mean to use an octal constant, use `0o`","code":null,"level":"help","spans":[{"file_name":"src/round.rs","byte_start":12185,"byte_end":12196,"line_start":330,"line_end":330,"column_start":54,"column_end":65,"is_primary":true,"text":[{"text":"        assert_eq!(dt.trunc_subsecs(2).nanosecond(), 080_000_000);","highlight_start":54,"highlight_end":65}],"label":null,"suggested_replacement":"0o80_000_000","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this is a decimal constant\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/round.rs:330:54\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m330\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        assert_eq!(dt.trunc_subsecs(2).nanosecond(), 080_000_000);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_prefixed_literal\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: if you mean to use a decimal constant, remove the `0` to avoid confusion\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m330\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        assert_eq!(dt.trunc_subsecs(2).nanosecond(), \u001b[0m\u001b[0m\u001b[38;5;10m80_000_000\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: if you mean to use an octal constant, use `0o`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m330\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        assert_eq!(dt.trunc_subsecs(2).nanosecond(), \u001b[0m\u001b[0m\u001b[38;5;10m0o80_000_000\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~\u001b[0m\n\n"}
{"message":"digits grouped inconsistently by underscores","code":{"code":"clippy::inconsistent_digit_grouping","explanation":null},"level":"warning","spans":[{"file_name":"src/round.rs","byte_start":15085,"byte_end":15097,"line_start":411,"line_end":411,"column_start":65,"column_end":77,"is_primary":true,"text":[{"text":"        let dt = Utc.ymd(2016, 12, 31).and_hms_nano(23, 59, 59, 1_75_500_000);","highlight_start":65,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#inconsistent_digit_grouping","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider","code":null,"level":"help","spans":[{"file_name":"src/round.rs","byte_start":15085,"byte_end":15097,"line_start":411,"line_end":411,"column_start":65,"column_end":77,"is_primary":true,"text":[{"text":"        let dt = Utc.ymd(2016, 12, 31).and_hms_nano(23, 59, 59, 1_75_500_000);","highlight_start":65,"highlight_end":77}],"label":null,"suggested_replacement":"175_500_000","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: digits grouped inconsistently by underscores\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/round.rs:411:65\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m411\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let dt = Utc.ymd(2016, 12, 31).and_hms_nano(23, 59, 59, 1_75_500_000);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider: `175_500_000`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#inconsistent_digit_grouping\u001b[0m\n\n"}
{"message":"manual `RangeInclusive::contains` implementation","code":{"code":"clippy::manual_range_contains","explanation":null},"level":"warning","spans":[{"file_name":"src/naive/date.rs","byte_start":61788,"byte_end":61813,"line_start":1643,"line_end":1643,"column_start":12,"column_end":37,"is_primary":true,"text":[{"text":"        if 0 <= year && year <= 9999 {","highlight_start":12,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(clippy::manual_range_contains)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"use","code":null,"level":"help","spans":[{"file_name":"src/naive/date.rs","byte_start":61788,"byte_end":61813,"line_start":1643,"line_end":1643,"column_start":12,"column_end":37,"is_primary":true,"text":[{"text":"        if 0 <= year && year <= 9999 {","highlight_start":12,"highlight_end":37}],"label":null,"suggested_replacement":"(0..=9999).contains(&year)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: manual `RangeInclusive::contains` implementation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/naive/date.rs:1643:12\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1643\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        if 0 <= year && year <= 9999 {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use: `(0..=9999).contains(&year)`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::manual_range_contains)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains\u001b[0m\n\n"}
{"message":"you checked before that `unwrap()` cannot fail, instead of checking and unwrapping, it's better to use `if let` or `match`","code":{"code":"clippy::unnecessary_unwrap","explanation":null},"level":"warning","spans":[{"file_name":"src/naive/date.rs","byte_start":74319,"byte_end":74330,"line_start":1988,"line_end":1988,"column_start":24,"column_end":35,"is_primary":false,"text":[{"text":"                    if d.is_some() {","highlight_start":24,"highlight_end":35}],"label":"the check is happening here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/naive/date.rs","byte_start":74365,"byte_end":74375,"line_start":1989,"line_end":1989,"column_start":33,"column_end":43,"is_primary":true,"text":[{"text":"                        let d = d.unwrap();","highlight_start":33,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(clippy::unnecessary_unwrap)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_unwrap","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: you checked before that `unwrap()` cannot fail, instead of checking and unwrapping, it's better to use `if let` or `match`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/naive/date.rs:1989:33\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1988\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    if d.is_some() {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthe check is happening here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1989\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        let d = d.unwrap();\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::unnecessary_unwrap)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_unwrap\u001b[0m\n\n"}
{"message":"you checked before that `unwrap()` cannot fail, instead of checking and unwrapping, it's better to use `if let` or `match`","code":{"code":"clippy::unnecessary_unwrap","explanation":null},"level":"warning","spans":[{"file_name":"src/naive/date.rs","byte_start":74845,"byte_end":74856,"line_start":2003,"line_end":2003,"column_start":24,"column_end":35,"is_primary":false,"text":[{"text":"                    if d.is_some() {","highlight_start":24,"highlight_end":35}],"label":"the check is happening here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/naive/date.rs","byte_start":74891,"byte_end":74901,"line_start":2004,"line_end":2004,"column_start":33,"column_end":43,"is_primary":true,"text":[{"text":"                        let d = d.unwrap();","highlight_start":33,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_unwrap","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: you checked before that `unwrap()` cannot fail, instead of checking and unwrapping, it's better to use `if let` or `match`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/naive/date.rs:2004:33\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2003\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    if d.is_some() {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthe check is happening here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2004\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        let d = d.unwrap();\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_unwrap\u001b[0m\n\n"}
{"message":"the operation is ineffective. Consider reducing it to `365`","code":{"code":"clippy::identity_op","explanation":null},"level":"warning","spans":[{"file_name":"src/naive/date.rs","byte_start":75893,"byte_end":75900,"line_start":2024,"line_end":2024,"column_start":39,"column_end":46,"is_primary":true,"text":[{"text":"        assert_eq!(from_ndays_from_ce(365 * 1 + 1), Some(NaiveDate::from_ymd(2, 1, 1)));","highlight_start":39,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(clippy::identity_op)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#identity_op","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the operation is ineffective. Consider reducing it to `365`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/naive/date.rs:2024:39\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2024\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        assert_eq!(from_ndays_from_ce(365 * 1 + 1), Some(NaiveDate::from_ymd(2, 1, 1)));\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::identity_op)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#identity_op\u001b[0m\n\n"}
{"message":"avoid using `collect()` when not needed","code":{"code":"clippy::needless_collect","explanation":null},"level":"warning","spans":[{"file_name":"src/naive/date.rs","byte_start":92229,"byte_end":92254,"line_start":2380,"line_end":2380,"column_start":69,"column_end":94,"is_primary":true,"text":[{"text":"            NaiveDate::from_ymd(262143, 12, 29).iter_days().take(4).collect::<Vec<_>>().len(),","highlight_start":69,"highlight_end":94}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(clippy::needless_collect)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_collect","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"replace with","code":null,"level":"help","spans":[{"file_name":"src/naive/date.rs","byte_start":92229,"byte_end":92254,"line_start":2380,"line_end":2380,"column_start":69,"column_end":94,"is_primary":true,"text":[{"text":"            NaiveDate::from_ymd(262143, 12, 29).iter_days().take(4).collect::<Vec<_>>().len(),","highlight_start":69,"highlight_end":94}],"label":null,"suggested_replacement":"count()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: avoid using `collect()` when not needed\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/naive/date.rs:2380:69\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2380\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            NaiveDate::from_ymd(262143, 12, 29).iter_days().take(4).collect::<Vec<_>>().len(),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace with: `count()`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::needless_collect)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_collect\u001b[0m\n\n"}
{"message":"avoid using `collect()` when not needed","code":{"code":"clippy::needless_collect","explanation":null},"level":"warning","spans":[{"file_name":"src/naive/date.rs","byte_start":92425,"byte_end":92450,"line_start":2388,"line_end":2388,"column_start":70,"column_end":95,"is_primary":true,"text":[{"text":"            NaiveDate::from_ymd(262143, 12, 12).iter_weeks().take(4).collect::<Vec<_>>().len(),","highlight_start":70,"highlight_end":95}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_collect","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"replace with","code":null,"level":"help","spans":[{"file_name":"src/naive/date.rs","byte_start":92425,"byte_end":92450,"line_start":2388,"line_end":2388,"column_start":70,"column_end":95,"is_primary":true,"text":[{"text":"            NaiveDate::from_ymd(262143, 12, 12).iter_weeks().take(4).collect::<Vec<_>>().len(),","highlight_start":70,"highlight_end":95}],"label":null,"suggested_replacement":"count()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: avoid using `collect()` when not needed\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/naive/date.rs:2388:70\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2388\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            NaiveDate::from_ymd(262143, 12, 12).iter_weeks().take(4).collect::<Vec<_>>().len(),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace with: `count()`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_collect\u001b[0m\n\n"}
{"message":"methods with the following characteristics: (`to_*` and `self` type is `Copy`) usually take `self` by value","code":{"code":"clippy::wrong_self_convention","explanation":null},"level":"warning","spans":[{"file_name":"src/naive/internals.rs","byte_start":16864,"byte_end":16869,"line_start":342,"line_end":342,"column_start":19,"column_end":24,"is_primary":true,"text":[{"text":"    pub fn to_mdf(&self) -> Mdf {","highlight_start":19,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(clippy::wrong_self_convention)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider choosing a less ambiguous name","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#wrong_self_convention","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: methods with the following characteristics: (`to_*` and `self` type is `Copy`) usually take `self` by value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/naive/internals.rs:342:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m342\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub fn to_mdf(&self) -> Mdf {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::wrong_self_convention)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider choosing a less ambiguous name\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#wrong_self_convention\u001b[0m\n\n"}
{"message":"methods with the following characteristics: (`to_*` and `self` type is `Copy`) usually take `self` by value","code":{"code":"clippy::wrong_self_convention","explanation":null},"level":"warning","spans":[{"file_name":"src/naive/internals.rs","byte_start":19644,"byte_end":19649,"line_start":464,"line_end":464,"column_start":18,"column_end":23,"is_primary":true,"text":[{"text":"    pub fn to_of(&self) -> Of {","highlight_start":18,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider choosing a less ambiguous name","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#wrong_self_convention","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: methods with the following characteristics: (`to_*` and `self` type is `Copy`) usually take `self` by value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/naive/internals.rs:464:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m464\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub fn to_of(&self) -> Of {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider choosing a less ambiguous name\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#wrong_self_convention\u001b[0m\n\n"}
{"message":"manual `RangeInclusive::contains` implementation","code":{"code":"clippy::manual_range_contains","explanation":null},"level":"warning","spans":[{"file_name":"src/naive/isoweek.rs","byte_start":4558,"byte_end":4583,"line_start":134,"line_end":134,"column_start":12,"column_end":37,"is_primary":true,"text":[{"text":"        if 0 <= year && year <= 9999 {","highlight_start":12,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"use","code":null,"level":"help","spans":[{"file_name":"src/naive/isoweek.rs","byte_start":4558,"byte_end":4583,"line_start":134,"line_end":134,"column_start":12,"column_end":37,"is_primary":true,"text":[{"text":"        if 0 <= year && year <= 9999 {","highlight_start":12,"highlight_end":37}],"label":null,"suggested_replacement":"(0..=9999).contains(&year)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: manual `RangeInclusive::contains` implementation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/naive/isoweek.rs:134:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m134\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        if 0 <= year && year <= 9999 {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use: `(0..=9999).contains(&year)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains\u001b[0m\n\n"}
{"message":"manual `Range::contains` implementation","code":{"code":"clippy::manual_range_contains","explanation":null},"level":"warning","spans":[{"file_name":"src/naive/time.rs","byte_start":23188,"byte_end":23221,"line_start":581,"line_end":581,"column_start":23,"column_end":56,"is_primary":true,"text":[{"text":"        debug_assert!(0 <= frac && frac < 1_000_000_000);","highlight_start":23,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"use","code":null,"level":"help","spans":[{"file_name":"src/naive/time.rs","byte_start":23188,"byte_end":23221,"line_start":581,"line_end":581,"column_start":23,"column_end":56,"is_primary":true,"text":[{"text":"        debug_assert!(0 <= frac && frac < 1_000_000_000);","highlight_start":23,"highlight_end":56}],"label":null,"suggested_replacement":"(0..1_000_000_000).contains(&frac)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: manual `Range::contains` implementation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/naive/time.rs:581:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m581\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        debug_assert!(0 <= frac && frac < 1_000_000_000);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use: `(0..1_000_000_000).contains(&frac)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains\u001b[0m\n\n"}
{"message":"manual `Range::contains` implementation","code":{"code":"clippy::manual_range_contains","explanation":null},"level":"warning","spans":[{"file_name":"src/naive/time.rs","byte_start":23440,"byte_end":23466,"line_start":590,"line_end":590,"column_start":23,"column_end":49,"is_primary":true,"text":[{"text":"        debug_assert!(0 <= secs && secs < 86_400);","highlight_start":23,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"use","code":null,"level":"help","spans":[{"file_name":"src/naive/time.rs","byte_start":23440,"byte_end":23466,"line_start":590,"line_end":590,"column_start":23,"column_end":49,"is_primary":true,"text":[{"text":"        debug_assert!(0 <= secs && secs < 86_400);","highlight_start":23,"highlight_end":49}],"label":null,"suggested_replacement":"(0..86_400).contains(&secs)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: manual `Range::contains` implementation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/naive/time.rs:590:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m590\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        debug_assert!(0 <= secs && secs < 86_400);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use: `(0..86_400).contains(&secs)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains\u001b[0m\n\n"}
{"message":"manual `Range::contains` implementation","code":{"code":"clippy::manual_range_contains","explanation":null},"level":"warning","spans":[{"file_name":"src/format/mod.rs","byte_start":19173,"byte_end":19195,"line_start":504,"line_end":504,"column_start":60,"column_end":82,"is_primary":true,"text":[{"text":"                if (spec == &Year || spec == &IsoYear) && !(0 <= v && v < 10_000) {","highlight_start":60,"highlight_end":82}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"use","code":null,"level":"help","spans":[{"file_name":"src/format/mod.rs","byte_start":19173,"byte_end":19195,"line_start":504,"line_end":504,"column_start":60,"column_end":82,"is_primary":true,"text":[{"text":"                if (spec == &Year || spec == &IsoYear) && !(0 <= v && v < 10_000) {","highlight_start":60,"highlight_end":82}],"label":null,"suggested_replacement":"(0..10_000).contains(&v)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: manual `Range::contains` implementation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/format/mod.rs:504:60\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m504\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                if (spec == &Year || spec == &IsoYear) && !(0 <= v && v < 10_000) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use: `(0..10_000).contains(&v)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains\u001b[0m\n\n"}
{"message":"calling `push_str()` using a single-character string literal","code":{"code":"clippy::single_char_add_str","explanation":null},"level":"warning","spans":[{"file_name":"src/format/mod.rs","byte_start":20917,"byte_end":20937,"line_start":543,"line_end":543,"column_start":21,"column_end":41,"is_primary":true,"text":[{"text":"                    result.push_str(\"Z\");","highlight_start":21,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(clippy::single_char_add_str)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_char_add_str","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using `push` with a character literal","code":null,"level":"help","spans":[{"file_name":"src/format/mod.rs","byte_start":20917,"byte_end":20937,"line_start":543,"line_end":543,"column_start":21,"column_end":41,"is_primary":true,"text":[{"text":"                    result.push_str(\"Z\");","highlight_start":21,"highlight_end":41}],"label":null,"suggested_replacement":"result.push('Z')","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: calling `push_str()` using a single-character string literal\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/format/mod.rs:543:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m543\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    result.push_str(\"Z\");\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider using `push` with a character literal: `result.push('Z')`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::single_char_add_str)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_char_add_str\u001b[0m\n\n"}
{"message":"manual `!RangeInclusive::contains` implementation","code":{"code":"clippy::manual_range_contains","explanation":null},"level":"warning","spans":[{"file_name":"src/format/parsed.rs","byte_start":9592,"byte_end":9615,"line_start":264,"line_end":264,"column_start":12,"column_end":35,"is_primary":true,"text":[{"text":"        if value < 1 || value > 12 {","highlight_start":12,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"use","code":null,"level":"help","spans":[{"file_name":"src/format/parsed.rs","byte_start":9592,"byte_end":9615,"line_start":264,"line_end":264,"column_start":12,"column_end":35,"is_primary":true,"text":[{"text":"        if value < 1 || value > 12 {","highlight_start":12,"highlight_end":35}],"label":null,"suggested_replacement":"!(1..=12).contains(&value)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: manual `!RangeInclusive::contains` implementation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/format/parsed.rs:264:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m264\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        if value < 1 || value > 12 {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use: `!(1..=12).contains(&value)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains\u001b[0m\n\n"}
{"message":"manual `!RangeInclusive::contains` implementation","code":{"code":"clippy::manual_range_contains","explanation":null},"level":"warning","spans":[{"file_name":"src/format/scan.rs","byte_start":1634,"byte_end":1654,"line_start":51,"line_end":51,"column_start":12,"column_end":32,"is_primary":true,"text":[{"text":"        if c < b'0' || b'9' < c {","highlight_start":12,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"use","code":null,"level":"help","spans":[{"file_name":"src/format/scan.rs","byte_start":1634,"byte_end":1654,"line_start":51,"line_end":51,"column_start":12,"column_end":32,"is_primary":true,"text":[{"text":"        if c < b'0' || b'9' < c {","highlight_start":12,"highlight_end":32}],"label":null,"suggested_replacement":"!(b'0'..=b'9').contains(&c)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: manual `!RangeInclusive::contains` implementation\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/format/scan.rs:51:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        if c < b'0' || b'9' < c {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use: `!(b'0'..=b'9').contains(&c)`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains\u001b[0m\n\n"}
{"message":"manual `RangeInclusive::contains` implementation","code":{"code":"clippy::manual_range_contains","explanation":null},"level":"warning","spans":[{"file_name":"src/format/scan.rs","byte_start":2704,"byte_end":2724,"line_start":82,"line_end":82,"column_start":43,"column_end":63,"is_primary":true,"text":[{"text":"    let s = s.trim_left_matches(|c: char| '0' <= c && c <= '9');","highlight_start":43,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"use","code":null,"level":"help","spans":[{"file_name":"src/format/scan.rs","byte_start":2704,"byte_end":2724,"line_start":82,"line_end":82,"column_start":43,"column_end":63,"is_primary":true,"text":[{"text":"    let s = s.trim_left_matches(|c: char| '0' <= c && c <= '9');","highlight_start":43,"highlight_end":63}],"label":null,"suggested_replacement":"('0'..='9').contains(&c)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: manual `RangeInclusive::contains` implementation\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/format/scan.rs:82:43\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m82\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let s = s.trim_left_matches(|c: char| '0' <= c && c <= '9');\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use: `('0'..='9').contains(&c)`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains\u001b[0m\n\n"}
{"message":"match expression looks like `matches!` macro","code":{"code":"clippy::match_like_matches_macro","explanation":null},"level":"warning","spans":[{"file_name":"src/format/scan.rs","byte_start":10368,"byte_end":10458,"line_start":316,"line_end":319,"column_start":24,"column_end":10,"is_primary":true,"text":[{"text":"        .position(|&c| match c {","highlight_start":24,"highlight_end":33},{"text":"            b'a'...b'z' | b'A'...b'Z' => false,","highlight_start":1,"highlight_end":48},{"text":"            _ => true,","highlight_start":1,"highlight_end":23},{"text":"        })","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(clippy::match_like_matches_macro)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try this","code":null,"level":"help","spans":[{"file_name":"src/format/scan.rs","byte_start":10368,"byte_end":10458,"line_start":316,"line_end":319,"column_start":24,"column_end":10,"is_primary":true,"text":[{"text":"        .position(|&c| match c {","highlight_start":24,"highlight_end":33},{"text":"            b'a'...b'z' | b'A'...b'Z' => false,","highlight_start":1,"highlight_end":48},{"text":"            _ => true,","highlight_start":1,"highlight_end":23},{"text":"        })","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":"!matches!(c, b'a'...b'z' | b'A'...b'Z')","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: match expression looks like `matches!` macro\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/format/scan.rs:316:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m316\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m        .position(|&c| match c {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m317\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            b'a'...b'z' | b'A'...b'Z' => false,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m318\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            _ => true,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m319\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        })\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try this: `!matches!(c, b'a'...b'z' | b'A'...b'Z')`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::match_like_matches_macro)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro\u001b[0m\n\n"}
{"message":"explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)","code":{"code":"clippy::needless_lifetimes","explanation":null},"level":"warning","spans":[{"file_name":"src/format/strftime.rs","byte_start":22947,"byte_end":23000,"line_start":490,"line_end":490,"column_start":5,"column_end":58,"is_primary":true,"text":[{"text":"    fn parse_and_collect<'a>(s: &'a str) -> Vec<Item<'a>> {","highlight_start":5,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(clippy::needless_lifetimes)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/format/strftime.rs:490:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m490\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn parse_and_collect<'a>(s: &'a str) -> Vec<Item<'a>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::needless_lifetimes)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\u001b[0m\n\n"}
{"message":"use of `unwrap_or` followed by a function call","code":{"code":"clippy::or_fun_call","explanation":null},"level":"warning","spans":[{"file_name":"src/format/strftime.rs","byte_start":23251,"byte_end":23279,"line_start":494,"line_end":494,"column_start":43,"column_end":71,"is_primary":true,"text":[{"text":"        items.collect::<Option<Vec<_>>>().unwrap_or(vec![Item::Error])","highlight_start":43,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(clippy::or_fun_call)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#or_fun_call","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try this","code":null,"level":"help","spans":[{"file_name":"src/format/strftime.rs","byte_start":23251,"byte_end":23279,"line_start":494,"line_end":494,"column_start":43,"column_end":71,"is_primary":true,"text":[{"text":"        items.collect::<Option<Vec<_>>>().unwrap_or(vec![Item::Error])","highlight_start":43,"highlight_end":71}],"label":null,"suggested_replacement":"unwrap_or_else(|| vec![Item::Error])","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of `unwrap_or` followed by a function call\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/format/strftime.rs:494:43\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m494\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        items.collect::<Option<Vec<_>>>().unwrap_or(vec![Item::Error])\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try this: `unwrap_or_else(|| vec![Item::Error])`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::or_fun_call)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#or_fun_call\u001b[0m\n\n"}
{"message":"45 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 45 warnings emitted\u001b[0m\n\n"}
